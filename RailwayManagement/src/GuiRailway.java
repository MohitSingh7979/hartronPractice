/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.*;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mohit
 */
public class GuiRailway extends javax.swing.JFrame {

    Connection con;
    String sql;
    PreparedStatement ps;

    private void createConnection() {
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/railway_management", "root", "root");
        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Creates new form GuiRailway
     */
    public GuiRailway() {
        initComponents();
        createConnection();
        fillSource();
        fillDestination();
        showReport1();
        showReport2();

    }

    private void showReport1() {
        try {
            ps = con.prepareStatement("SELECT "
                    + " train_name, "
                    + " passenger_name,"
                    + " number_of_tickets,"
                    + " total_amount "
                    + "FROM ticket_booking tb join train_master tm on tb.train_id = tm.train_id");
            ResultSet rs = ps.executeQuery();

            DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
            tm.setRowCount(0);
            while (rs.next()) {
                Object[] data = new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),};
                tm.addRow(data);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showReport2() {
        try {
            ps = con.prepareStatement("SELECT "
                    + " train_name, "
                    + " count(booking_id),"
                    + " sum(total_amount),"
                    + " available_seats "
                    + " FROM ticket_booking tb join train_master tm on tb.train_id = tm.train_id group by train_name,available_seats");
            ResultSet rs = ps.executeQuery();

            DefaultTableModel tm = (DefaultTableModel) jTable2.getModel();
            tm.setRowCount(0);
            while (rs.next()) {
                Object[] data = new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),};
                tm.addRow(data);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillSource() {
        try {
            ps = con.prepareStatement("SELECT * FROM train_master");
            ResultSet rs = ps.executeQuery();
            source.removeAllItems();
            while (rs.next()) {
                source.addItem(rs.getString(3));
            }
        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillDestination() {
        try {
            ps = con.prepareStatement("SELECT * FROM train_master");
            ResultSet rs = ps.executeQuery();
            destination.removeAllItems();
            while (rs.next()) {
                destination.addItem(rs.getString(4));
            }
        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void getTrainName() {
        try {
            ps = con.prepareStatement("SELECT * FROM train_master where source_station = ? and destination_station = ?");
            ps.setObject(1, source.getSelectedItem());
            ps.setObject(2, destination.getSelectedItem());

            ResultSet rs = ps.executeQuery();
            boolean next = rs.next();
            if (next) {
                train.setText(rs.getString(2));
            } else {
                train.setText("");
            }

        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        booking = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        bookedAt = new javax.swing.JSpinner();
        travelDate = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tickets = new javax.swing.JSpinner();
        amount = new javax.swing.JSpinner();
        btnBookTicket = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        source = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        destination = new javax.swing.JComboBox<>();
        train = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Booking Id");

        jLabel2.setText("Train");

        jLabel3.setText("Passenger Name");

        jLabel4.setText("Booked At");

        bookedAt.setModel(new javax.swing.SpinnerDateModel());

        travelDate.setModel(new javax.swing.SpinnerDateModel());

        jLabel5.setText("Travel Date");

        jLabel6.setText("Total Tickets");

        jLabel7.setText("Total Amount");

        tickets.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        amount.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 1.0d));

        btnBookTicket.setText("Book Ticket");
        btnBookTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookTicketActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Train Name", "Passenger Name", "Number of Tickets", "Total Amount"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Train Name", "Total Booking", "Total Revenue", "Available Seats Left"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel8.setText("Source");

        source.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceActionPerformed(evt);
            }
        });

        jLabel9.setText("Destination");

        destination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBookTicket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(booking, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(bookedAt, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(travelDate, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(tickets, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(amount, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(source, 0, 150, Short.MAX_VALUE)
                            .addComponent(destination, 0, 150, Short.MAX_VALUE)
                            .addComponent(train)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(booking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(train, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookedAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(travelDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGap(81, 81, 81)
                .addComponent(btnBookTicket)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookTicketActionPerformed
        // TODO add your handling code here:

        // validation train
        if (train.getText().isBlank()) {
            JOptionPane.showMessageDialog(rootPane, "Select Train First");
            return;
        }
        if (name.getText().isBlank()) {
            JOptionPane.showMessageDialog(rootPane, "Enter Passenger Name");
            return;
        }
        try {
            // booking id validation
            ps = con.prepareStatement("SELECT * FROM ticket_booking where booking_id = ?");
            ps.setObject(1, booking.getValue());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                JOptionPane.showMessageDialog(rootPane, "Change Booking Id");
                return;
            }

            // getting Train Id
            ps = con.prepareStatement("SELECT * FROM train_master  where train_name = ?");
            ps.setObject(1, train.getText());
            rs = ps.executeQuery();
            rs.next();
            int trainId = rs.getInt(1);
            int seats = rs.getInt(7);
            int avail = rs.getInt(8);

            int totalTickets = (int) tickets.getValue();
            if (avail >= totalTickets) {
                PreparedStatement ps1 = con.prepareStatement("UPDATE `railway_management`.`train_master` SET `available_seats` = ? WHERE (`train_id` = ?)");
                ps1.setObject(1, avail - totalTickets);
                ps1.setObject(2, trainId);
                ps1.executeUpdate();
            } else {
                JOptionPane.showMessageDialog(rootPane, "no seats available on Train");
                return;
            }

            // inserting into sql
            ps = con.prepareStatement("INSERT INTO `railway_management`.`ticket_booking` ("
                    + " `booking_id`, "
                    + " `train_id`, "
                    + " `passenger_name`, "
                    + " `booked_at`, "
                    + " `travel_date`, "
                    + " `number_of_tickets`, "
                    + " `total_amount`"
                    + " ) VALUES (?, ?, ?, ?, ?, ?, ?)");

            ps.setObject(1, booking.getValue());
            ps.setObject(2, trainId);
            ps.setObject(3, name.getText());
            ps.setObject(4, bookedAt.getValue());
            ps.setObject(5, travelDate.getValue());
            ps.setObject(6, totalTickets);
            ps.setObject(7, amount.getValue());

            ps.executeUpdate();

            showReport1();
            showReport2();

        } catch (SQLException ex) {
            Logger.getLogger(GuiRailway.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBookTicketActionPerformed

    private void sourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceActionPerformed
        // TODO add your handling code here:
        getTrainName();
    }//GEN-LAST:event_sourceActionPerformed

    private void destinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationActionPerformed
        // TODO add your handling code here:
        getTrainName();
    }//GEN-LAST:event_destinationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiRailway.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiRailway.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiRailway.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiRailway.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiRailway().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner amount;
    private javax.swing.JSpinner bookedAt;
    private javax.swing.JSpinner booking;
    private javax.swing.JButton btnBookTicket;
    private javax.swing.JComboBox<String> destination;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField name;
    private javax.swing.JComboBox<String> source;
    private javax.swing.JSpinner tickets;
    private javax.swing.JTextField train;
    private javax.swing.JSpinner travelDate;
    // End of variables declaration//GEN-END:variables
}
